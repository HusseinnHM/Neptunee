using Microsoft.AspNetCore.Http;
using Neptunee.IO.Files.Options;

namespace Neptunee.IO.Files;

/// <summary>
/// Represents a file service for uploading, modifying, and deleting files.
/// </summary>
public interface INeptuneeFileService
{
    /// <summary>
    /// Uploads a file asynchronously to the specified virtual upload path if the file is not null.
    /// </summary>
    /// <param name="file">The file to upload.</param>
    /// <param name="uploadPath">The virtual path where the file should be uploaded.</param>
    /// <returns>The virtual path if the file is uploaded; otherwise, null.</returns>
    Task<string?> UploadAsync(IFormFile? file, string uploadPath);

    /// <summary>
    /// Uploads a file asynchronously to the specified virtual upload path generated by the provided function if the file is not null.
    /// </summary>
    /// <param name="file">The file to upload.</param>
    /// <param name="uploadPath">A function that generates the upload path for the file.</param>
    /// <returns>The virtual path if the file is uploaded; otherwise, null.</returns>
    Task<string?> UploadAsync(IFormFile? file, Func<IFormFile, string> uploadPath);

    /// <summary>
    /// Uploads a file asynchronously to the specified virtual upload path generated by the provided functions in <see cref="NeptuneeFileOptions"/> if the file is not null.
    /// </summary>
    /// <param name="file">The file to upload.</param>
    /// <returns>The virtual path if the file is uploaded; otherwise, null.</returns>
    Task<string?> UploadAsync(IFormFile? file);

    /// <summary>
    /// Uploads a list of files asynchronously to the specified virtual directory path with custom file names.
    /// </summary>
    /// <param name="files">The list of files to upload.</param>
    /// <param name="dirPath">The virtual directory path where the files should be uploaded.</param>
    /// <param name="fileName">A function that generates the file name for each file.</param>
    /// <returns>A list of virtual paths for the uploaded files.</returns>
    Task<IEnumerable<string>> UploadAsync(List<IFormFile> files, string dirPath, Func<IFormFile, string> fileName);

    /// <summary>
    /// Modifies a file by uploading a new file if not null and deleting the original file if necessary.
    /// </summary>
    /// <param name="original">The virtual original file path.</param>
    /// <param name="forceDelete">Force delete original file even the <see cref="upload"/> is null.</param>
    /// <param name="upload">The new virtual path if the file is uploaded; otherwise, null.</param>
    /// <returns>The virtual path if the new file is uploaded or original doesn't deleted; otherwise, null.</returns>
    Task<string?> ModifyAsync(string? original, bool forceDelete, Func<Task<string?>> upload);

    /// <summary>
    /// Modifies a file by uploading a new files and deleting the original files if necessary.
    /// </summary>
    /// <param name="original">The list of virtual original file paths.</param>
    /// <param name="deletes">The list of virtual file paths to delete.</param>
    /// <param name="uploads">A list of virtual upload paths for the new files.</param>
    /// <returns>A list of virtual paths for the modified files.</returns>
    Task ModifyAsync(List<string> original, IEnumerable<string> deletes, Task<IEnumerable<string>> uploads);

    /// <summary>
    /// Deletes a file from the specified virtual path.
    /// </summary>
    /// <param name="path">The virtual path of the file to delete.</param>
    void Delete(string? path);

    /// <summary>
    /// Deletes multiple files from the specified virtual paths.
    /// </summary>
    /// <param name="paths">The list of virtual file paths to delete.</param>
    void Delete(List<string> paths);

    /// <summary>
    /// Creates a directory if it does not already exist.
    /// </summary>
    /// <param name="path">The virtual directory path to create.</param>
    /// <returns>The virtual created directory path.</returns>
    string CreateDirectoryIfNotExists(string path);

    /// <summary>
    /// Deletes a directory if it exists.
    /// </summary>
    /// <param name="path">The virtual path of the directory to delete.</param>
    void DeleteDirectoryIfExists(string path);
}